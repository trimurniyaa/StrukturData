# -*- coding: utf-8 -*-
"""ex9 strukdat_trimurniyaningsih.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15RkwHiprQrNpAaxjw6MPCoPX3SWPvETO

##**Exercise 9 Struktur Data**

##Introduction Section

1. Jelaskan definisi object dalam Paradigma Object-Oriented!
2. Jelaskan tiga tujuan dalam Paradigma Object-Oriented!
3. Jelaskan tiga prinsip dalam Paradigma Object-Oriented!
4. Sebutkan contoh design pattern dalam Paradigma Object-Oriented!

## **Jawaban**
1. Object Oriented adalah konsep pemrograman yang menggabungkan function dan class dalam satu file. Fungsi dan class tersebut juga hanya perlu ditulis sekali tidak perlu ditulis kembali jika ingin menggunakannya.
2. Tujuan dari Paradigma Object Oriented adalah untuk menciptakan program yang :
- mudah dikelola,
- jelas,
- handal
3. Tiga prinsip Paradigma Object Oriented adalah :
- Encapsulation yaitu metode untuk menggabungkan data menjadi satu.
- Inheritance yaitu pewarisan sifat kepada class baru yang dibuat.
- Abstract Class yaitu class-class yang sifatnya abstrak dari sekumpulan data yang sudah ada. Tetapi abstrack class tidak bisa diubah yang berarti tetap.
- Polymorphism yaitu satu interface yang bisa diakses oleh objek yang berbeda.
4. Contoh design pattern adalah iterator, yaitu koleksi objek yang dibuat secara berurut. Misalnya list, stack, tree, dan lain-lain.

##Class and Object

1. Jelaskan definisi Class!
2. Jelaskan perbedaan Attribute dengan Method!
3. Jelaskan apa itu instansiasi Object!
4. Jelaskan apa itu identifier!

**Jawaban**
1. Class adalah blueprint (cetakan) dari objek yang dibuat.
2.  Atribut adalah representasi variabel yang dimiliki oleh sebuah objek, sedangkan method adalah fungsi atau perilaku yang dimiliki oleh suatu objek. 
3. Instansiasi Object adalah pembuatan object dari sebuah class.
4. Identifier adalah nama yang diberikan untuk mengidentifikasi seperti nama variabel, function, class, dan lain-lain.

##Implementing Class

## __Implementing Class__
Implementasikan kelas diagram "Kendaraan" berikut ke dalam Python!

   Class Kendaraan :
   
    - string nomorPlat
    - string merk
    - string jenis
    - string warna
    - int tanggalBeli
    - int bulanBeli
    - int tahunBeli
    - double berat
    - double harga
    - showTanggalPembelian()

**Jawaban**
"""

class Kendaraan:
  def __init__ (self, nomorPlat, merk, jenis, warna, tanggalBeli, bulanBeli, tahunBeli, berat, harga):
    self.nomorPlat = nomorPlat
    self.merk  = merk 
    self.jenis = jenis
    self.warna = warna
    self.tanggalBeli = tanggalBeli  
    self.bulanBeli = bulanBeli  
    self.tahunBeli = tahunBeli
    self.berat = berat
    self.harga = harga
  
  def showTanggalPembelian(self):
    print(f"Kendaraan dengan Nomor Plat {self.nomorPlat}\n merk {self.merk}\n jenis {self.jenis}\n warna {self.warna}\n dibeli pada {self.tanggalBeli}/{self.bulanBeli}/{self.tahunBeli}\n dengan berat {self.berat}\n seharga {self.harga}")

motor = Kendaraan("F 2301 TR ", "Suzuki", "Matic", "Hitam", 23, 11, 2013, 450, 5000000)
motor.showTanggalPembelian()

"""##**Main OOP Concept**

1. Jelaskan konsep encapsulation dalam Paradigma Object-Oriented!
2. Jelaskan konsep inheritance dalam Paradigma Object-Oriented!
3. Jelaskan perbedaan public method dan private method dalam encapsulation!
4. Jelaskan perbedaan superclass dan subclass dalam inheritance!

**Jawaban**
1. Encapsulation adalah konsep pengikatan informasi yang disatukan menjadi satu unit agar memudahkan pengguna dalam membacanya.
2. Inheritance adalah class baru yang diwarisi atau diturunkan dari class yang sudah ada sebelumnya.
3. Public method adalah method yang bisa diakses oleh seluruh class sedangkan private method adalah method yang hanya bisa diakses oleh class itu sendiri yang ditandai dengan tanda underscore (_) saat penamaan variabel.
4. Superclass adalah class utama yang dibuat saat pembuatan class sedangkan subclass adalah bagian dari superclass yang sifat atau perilakunya sama dengan superclass.

##**Programming Exercise**
Buatlah class diagram dari code python berikut ini:
"""

class Koordinat:
	def __init__(self,x,y):
		self.z = 0
		self.x = x
		self.y = y
	def set_x(self,x):
		self.x = x
	def increment_x(self):
		self.x+=1
	def __str__(self):
		return f"x : {self.x} , y:{self.y} , z:{self.z}"

"""<table>
  <tr>
    <th>
      Koordinat
    </th>
  </tr>
  <tr>
    <td>
      z = 0 <br>
      x = x <br>
      y = y
    </td>
  </tr>
  <tr>
    <td>set_x() <br><br> increment_x() <br><br> __str__() </td>
  </tr>
</table>

Implementasikan class diagram berikut menjadi program python!

<table>
  <tr>
    <th>Koordinat</th>
  </tr>
  <tr>
    <td>int x <br><br> int y <br><br> int z </td>
  </tr>
  <tr>
    <td>setx() <br><br> sety() <br><br> setz() </td>
  </tr>
</table>
"""

class Koordinat:
	def __init__(self,x,y):
		self.z = x
		self.x = y
		self.y = z
	def set_x(self,x):
		self.x = x
	def sety(self,y):
		self.y = y
  def setz(self,z):
    self.z = z
	def __str__(self):
		return f"x : {self.x} , y:{self.y} , z:{self.z}"

"""<center>
<table>
  <tr>
    <th>Vector</th>
  </tr>
  <tr>
    <td>Koordinat Koordinat</td>
  </tr>
  <tr>
    <td>setKoordinat() <br><br> getKoordinat() <br><br> norm()</td>
  </tr>
</table>
"""

class Vector:
  def __init__(self, koordinat):
    self.koordinat = koordinat
  def setKoordinat(self, koor):
    self.koordinat = koor
  def getKoordinat(self, y):
    return self.koordinat
  def norm(self):
    norm = 0
    for i in range(len(self.koordinat)):
      norm = norm + self.koordinat[i]**2
    return norm**0.5

"""- fungsi norm() adalah fungsi untuk menghitung norm dari sebuah vector yaitu
norm = $\sqrt{x^2 + y^2 + z^2}$ . Buatlah fungsi untuk menghitung norm dari vector berdasarkan class yang telah anda buat! 
"""

class Vector:
  def __init__(self, koordinat):
      self.koordinat = koordinat
  def setKoordinat(self, koor):
      self.koordinat = koor
  def getKoordinat(self, y):
      return self.koordinat
  def norm(self):
      norm = 0
      for i in range(len(self.koordinat)):
        norm = norm + self.koordinat[i]**2
      return norm**0.5

koordinat = Vector([7, 24, 25])
koordinat.norm()

"""- Euclidian Distance adalah jarak antara 2 vector dan didefinisikan sebagai 


$$d = \sqrt{ (x_1 - x_2)^2 + (y_1 - y_2)^2 + (x_1 - x_2)^2 } $$

buatlah program untuk menghitung euclidian distance antara 2 vector berdasarkan class yang telah anda buat!
"""

class Vector:
  def __init__(self, vector1, vector2):
    self.vector1 = vector1
    self.vector2 = vector2
  def euclidian_distance(self):
    distance = 0
    for i in range(len(self.vector1)):
      distance = distance + (self.vector1[i] - self.vector2[i])**2
    return distance**0.5
  
jarak = Vector([3, 4, 5], [7, 24, 25])
jarak.euclidian_distance()

"""- Perhatikan tabel berikut

| Vector | x   | y   | z   | kelas |
| ------ | --- | --- | --- | ----- |
| A      | 0   | 1   | 1   | 0     |
| B      | 2   | 2   | 2   | 1     |
| C      | 1.5 | 1.2 | 1.5 | 1     |
| D      | 10  | 9   | 8   | 0     |
| E      | 5   | 5   | 5   | 0     |
| F      | 8   | 8   | 8   | 0     |
| G      | 6   | 6   | 1   | 0     |
| H      | 3   | 3   | 3   | ?     |

Salah satu metode dalam data science untuk melakukan klasifikasi adalah dengan menggunakan k-nearest neighbor, dimana cara menentukan label kelas adalah dengan cara melihat tetangga dengan euclidian distance terdekat. Tentukan kelas dari vector H dengan cara:
- Tentukan 3 tetangga paling dekat dari H 
- dari 3 tetangga tersebut, pilih kelas yang paling banyak muncul
- Jadikan kelas yang paling banyak muncul tersebut sebagai kelas dari vector H

Implementasikan algoritma tersebut menggunakan program python dengan paradigma object-oriented programming yang telah anda pelajari!
"""

from math import sqrt
import statistics
class Vektor:
  def __init__(self, vektor, x, y, z, nama_vektor):
    self.vektor = vektor
    self.x = x
    self.y = y
    self.z = z
    self.nama_vektor = nama_vektor
    self.kls_h = 0

  def jarak(self):
    vkt = []
    jarak = []
    # Jarak tetangga
    for i in self.vektor:
        komponen_vektor = list(self.vektor[i].values())
        def dekat(komponen_vektor):
            distance = 0
            for i in komponen_vektor:
                distance = sqrt((self.x-komponen_vektor[1])**2 + (self.y-komponen_vektor[2])**2 + (self.z-komponen_vektor[3])**2)
            return distance
        vkt = vkt + [self.vektor[i]]
        jarak = jarak + [round(dekat(komponen_vektor), 2)]
        print(f"Jarak vektor {self.vektor[i]['vektor']} dengan vektor H adalah sebesar {round(dekat(komponen_vektor), 2)}")
    val_sorted = sorted(jarak)
    tetangga = {}
    for i in range(len(jarak)):
        tetangga[jarak[i]] = vkt[i]    
    print("Urutannya adalah:")
    for j in range(len(val_sorted)): 
        print(f"Jarak vektor {tetangga[val_sorted[j]]['vektor']} dengan vektor H adalah sebesar {val_sorted[j]}")
    print("3 Tetangga terdekat:")
    kls = []
    for k in range(3):
        print(f"Vektor {tetangga[val_sorted[k]]['vektor']} dengan kelas {tetangga[val_sorted[k]]['kelas']} pada jarak {val_sorted[k]} dengan vektor H")
        kls = kls + [tetangga[val_sorted[k]]['kelas']]
    self.kls_h = statistics.mode(kls)
    print("Kelas yang paling banyak muncul adalah = ", self.kls_h)
    print("Kelas dari vektor H = ", self.kls_h)

  def kelas(self):
    return {'vektor': self.nama_vektor, 'x' : self.x, 'y' : self.y, 'z': self.z, 'kelas': self.kls_h}

tabel = {
    "vektor1" : {'vektor': 'A', 'x' : 0, 'y' : 1, 'z': 1, 'kelas': 0 },
    "vektor2" : {'vektor': 'B', 'x' : 2, 'y' : 2, 'z': 2, 'kelas': 1},
    "vektor3" : {'vektor': 'C', 'x' : 1.5, 'y' : 1.2, 'z': 1, 'kelas': 1},
    "vektor4" : {'vektor': 'D', 'x' : 10, 'y' : 9, 'z': 0, 'kelas': 0},
    "vektor5" : {'vektor': 'E', 'x' : 5, 'y' : 5, 'z': 5, 'kelas': 0},
    "vektor6" : {'vektor': 'F', 'x' : 8, 'y' : 8, 'z': 0, 'kelas': 0},
    "vektor7" : {'vektor': 'G', 'x' : 6, 'y' : 6, 'z': 0, 'kelas': 0},
}
for key in tabel:
    print(tabel[key])
vektorh = [3, 3, 3, "H"]
print("\n")
print({'vektor': vektorh[3], 'x' : vektorh[0], 'y' : vektorh[1], 'z': vektorh[2], 'kelas': '?'})
print("\n")
data = Vektor(tabel, vektorh[0], vektorh[1], vektorh[2], vektorh[3])
data.jarak()
print(data.kelas())
tabel["vektor8"] = data.kelas()
print("\n")
for key in tabel:
    print(tabel[key])